{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/pages/index.js"],"names":["SEO","meta","image","title","description","slug","lang","query","render","data","siteMetadata","site","metaDescription","metaImage","siteUrl","url","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","BlogIndex","this","props","siteTitle","posts","allMarkdownRemark","edges","location","map","node","frontmatter","fields","key","style","marginBottom","rhythm","boxShadow","to","date","dangerouslySetInnerHTML","__html","excerpt","React","Component","pageQuery"],"mappings":"iKAqBA,SAASA,EAAT,GAAsE,IAAvDC,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAqB,IAAfC,YAAe,MAAR,KAAQ,EACnE,OACE,kBAAC,cAAD,CACEC,MAnBK,YAoBLC,OAAQ,SAAAC,GAAS,IACPC,EAAiBD,EAAKE,KAAtBD,aACFE,EAAkBR,GAAeM,EAAaN,YAC9CS,EAAYX,EAAWQ,EAAaI,QAAnB,IAA8BZ,EAAU,KACzDa,EAAG,GAAML,EAAaI,QAAUT,EACtC,OACE,kBAAC,IAAD,eACEW,eAAgB,CAAEV,SACbH,EACD,CACEc,cAAc,QAASP,EAAaP,MACpCA,SAEF,CACEA,MAAUO,EAAaP,MAAlB,4BARb,CAUEF,KAAM,CACJ,CACEiB,KAAM,cACNC,QAASP,GAEX,CACEQ,SAAU,SACVD,QAASJ,GAEX,CACEK,SAAU,WACVD,QAAShB,GAASO,EAAaP,OAEjC,CACEiB,SAAU,iBACVD,QAASP,GAEX,CACEM,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAAST,EAAaW,OAAOC,SAE/B,CACEJ,KAAM,gBACNC,QAAShB,GAASO,EAAaP,OAEjC,CACEe,KAAM,sBACNC,QAASP,IAGVW,OACCV,EACI,CACE,CACEO,SAAU,WACVD,QAASN,GAEX,CACEK,KAAM,gBACNC,QAASN,IAGb,IAELU,OAAOtB,OAlElB,SA0EJD,EAAIwB,aAAe,CACjBvB,KAAM,GACNE,MAAO,GACPE,KAAM,IAWOL,O,oLCvGTyB,E,kGACJjB,OAAA,WAAU,IACAC,EAASiB,KAAKC,MAAdlB,KACFmB,EAAYnB,EAAKE,KAAKD,aAAaP,MACnC0B,EAAQpB,EAAKqB,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQC,SAAUN,KAAKC,MAAMK,SAAU7B,MAAOyB,GAC5C,kBAAC,IAAD,CAAKzB,MAAM,cACX,kBAAC,IAAD,MAAQ,IACP0B,EAAMI,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACN/B,EAAQ+B,EAAKC,YAAYhC,OAAS+B,EAAKE,OAAO/B,KACpD,OACE,6BAASgC,IAAKH,EAAKE,OAAO/B,MACxB,gCACE,wBACEiC,MAAO,CACLC,aAAcC,YAAO,EAAI,KAG3B,kBAAC,OAAD,CACEF,MAAO,CACLG,UAAU,QAEZC,GAAIR,EAAKE,OAAO/B,MAEf,IACAF,EAAO,KACF,KACJ,IACN,mCAAS+B,EAAKC,YAAYQ,KAA1B,KAAyC,KACjC,IACV,iCACE,uBACEC,wBAAyB,CACvBC,OAAQX,EAAKC,YAAY/B,aAAe8B,EAAKY,WAE9C,KACM,QAGb,M,GAzCYC,IAAMC,WA+CfvB,YAER,IAAMwB,EAAS","file":"component---src-pages-index-js-9f12a8f95a3a4890a2f8.js","sourcesContent":["import React from \"react\"\nimport Helmet from \"react-helmet\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        title\n        author\n        description\n        siteUrl\n        social {\n          twitter\n        }\n      }\n    }\n  }\n`\n\nfunction SEO({ meta, image, title, description, slug, lang = \"en\" }) {\n  return (\n    <StaticQuery\n      query={query}\n      render={data => {\n        const { siteMetadata } = data.site\n        const metaDescription = description || siteMetadata.description\n        const metaImage = image ? `${siteMetadata.siteUrl}/${image}` : null\n        const url = `${siteMetadata.siteUrl}${slug}`\n        return (\n          <Helmet\n            htmlAttributes={{ lang }}\n            {...(title\n              ? {\n                  titleTemplate: `%s — ${siteMetadata.title}`,\n                  title,\n                }\n              : {\n                  title: `${siteMetadata.title} — A blog by Dan Abramov`,\n                })}\n            meta={[\n              {\n                name: \"description\",\n                content: metaDescription,\n              },\n              {\n                property: \"og:url\",\n                content: url,\n              },\n              {\n                property: \"og:title\",\n                content: title || siteMetadata.title,\n              },\n              {\n                property: \"og:description\",\n                content: metaDescription,\n              },\n              {\n                name: \"twitter:card\",\n                content: \"summary\",\n              },\n              {\n                name: \"twitter:creator\",\n                content: siteMetadata.social.twitter,\n              },\n              {\n                name: \"twitter:title\",\n                content: title || siteMetadata.title,\n              },\n              {\n                name: \"twitter:description\",\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                metaImage\n                  ? [\n                      {\n                        property: \"og:image\",\n                        content: metaImage,\n                      },\n                      {\n                        name: \"twitter:image\",\n                        content: metaImage,\n                      },\n                    ]\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  meta: [],\n  title: \"\",\n  slug: \"\",\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  image: PropTypes.string,\n  meta: PropTypes.array,\n  slug: PropTypes.string,\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/Bio\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/SEO\"\nimport { rhythm } from \"../utils/typography\"\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        <Bio />{\" \"}\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <article key={node.fields.slug}>\n              <header>\n                <h3\n                  style={{\n                    marginBottom: rhythm(1 / 4),\n                  }}\n                >\n                  <Link\n                    style={{\n                      boxShadow: `none`,\n                    }}\n                    to={node.fields.slug}\n                  >\n                    {\" \"}\n                    {title}{\" \"}\n                  </Link>{\" \"}\n                </h3>{\" \"}\n                <small> {node.frontmatter.date} </small>{\" \"}\n              </header>{\" \"}\n              <section>\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html: node.frontmatter.description || node.excerpt,\n                  }}\n                />{\" \"}\n              </section>{\" \"}\n            </article>\n          )\n        })}{\" \"}\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}