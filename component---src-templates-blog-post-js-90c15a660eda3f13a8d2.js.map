{"version":3,"sources":["webpack:///./src/components/Seo.js","webpack:///./src/templates/blog-post.js"],"names":["SEO","meta","image","title","description","slug","lang","query","render","data","siteMetadata","site","metaDescription","metaImage","siteUrl","url","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","BlogPostTemplate","post","this","props","markdownRemark","siteTitle","pageContext","previous","next","Layout","location","frontmatter","excerpt","style","marginTop","rhythm","marginBottom","scale","display","date","dangerouslySetInnerHTML","__html","html","Bio","flexWrap","justifyContent","listStyle","padding","to","fields","rel","React","Component","pageQuery"],"mappings":"sPAqBA,SAASA,EAAT,GAAsE,IAAvDC,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAqB,IAAfC,YAAe,MAAR,KAAQ,EACnE,OACE,kBAAC,cAAD,CACEC,MAnBK,YAoBLC,OAAQ,SAAAC,GAAS,IACPC,EAAiBD,EAAKE,KAAtBD,aACFE,EAAkBR,GAAeM,EAAaN,YAC9CS,EAAYX,EAAWQ,EAAaI,QAAnB,IAA8BZ,EAAU,KACzDa,EAAG,GAAML,EAAaI,QAAUT,EACtC,OACE,kBAAC,IAAD,eACEW,eAAgB,CAAEV,SACbH,EACD,CACEc,cAAc,QAASP,EAAaP,MACpCA,SAEF,CACEA,MAAUO,EAAaP,MAAlB,4BARb,CAUEF,KAAM,CACJ,CACEiB,KAAM,cACNC,QAASP,GAEX,CACEQ,SAAU,SACVD,QAASJ,GAEX,CACEK,SAAU,WACVD,QAAShB,GAASO,EAAaP,OAEjC,CACEiB,SAAU,iBACVD,QAASP,GAEX,CACEM,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAAST,EAAaW,OAAOC,SAE/B,CACEJ,KAAM,gBACNC,QAAShB,GAASO,EAAaP,OAEjC,CACEe,KAAM,sBACNC,QAASP,IAGVW,OACCV,EACI,CACE,CACEO,SAAU,WACVD,QAASN,GAEX,CACEK,KAAM,gBACNC,QAASN,IAGb,IAELU,OAAOtB,OAlElB,SA0EJD,EAAIwB,aAAe,CACjBvB,KAAM,GACNE,MAAO,GACPE,KAAM,IAWOL,Q,YCvGTyB,E,kGACJjB,OAAA,WACE,IAAMkB,EAAOC,KAAKC,MAAMnB,KAAKoB,eACvBC,EAAYH,KAAKC,MAAMnB,KAAKE,KAAKD,aAAaP,MAF7C,EAGoBwB,KAAKC,MAAMG,YAA9BC,EAHD,EAGCA,SAAUC,EAHX,EAGWA,KAElB,OACE,kBAACC,EAAA,EAAD,CAAQC,SAAUR,KAAKC,MAAMO,SAAUhC,MAAO2B,GAC5C,kBAAC,EAAD,CACE3B,MAAOuB,EAAKU,YAAYjC,MACxBC,YAAasB,EAAKU,YAAYhC,aAAesB,EAAKW,UAEpD,iCACE,gCACE,wBACEC,MAAO,CACLC,UAAWC,YAAO,GAClBC,aAAc,IAGff,EAAKU,YAAYjC,OAEpB,uBACEmC,MAAK,iBACAI,aAAM,IADN,CAEHC,QAAQ,QACRF,aAAcD,YAAO,MAGtBd,EAAKU,YAAYQ,OAGtB,6BAASC,wBAAyB,CAAEC,OAAQpB,EAAKqB,QACjD,wBACET,MAAO,CACLG,aAAcD,YAAO,GACrBD,UAAWC,YAAO,MAGtB,gCACE,kBAACQ,EAAA,EAAD,QAIJ,6BACE,wBACEV,MAAO,CACLK,QAAQ,OACRM,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGpB,GACC,kBAAC,OAAD,CAAMqB,GAAIrB,EAASsB,OAAOjD,KAAMkD,IAAI,QAApC,KACKvB,EAASI,YAAYjC,QAI9B,4BACG8B,GACC,kBAAC,OAAD,CAAMoB,GAAIpB,EAAKqB,OAAOjD,KAAMkD,IAAI,QAC7BtB,EAAKG,YAAYjC,MADpB,W,GA/DeqD,IAAMC,WA6ExBC,GAFEjC,YAEO","file":"component---src-templates-blog-post-js-90c15a660eda3f13a8d2.js","sourcesContent":["import React from \"react\"\nimport Helmet from \"react-helmet\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        title\n        author\n        description\n        siteUrl\n        social {\n          twitter\n        }\n      }\n    }\n  }\n`\n\nfunction SEO({ meta, image, title, description, slug, lang = \"en\" }) {\n  return (\n    <StaticQuery\n      query={query}\n      render={data => {\n        const { siteMetadata } = data.site\n        const metaDescription = description || siteMetadata.description\n        const metaImage = image ? `${siteMetadata.siteUrl}/${image}` : null\n        const url = `${siteMetadata.siteUrl}${slug}`\n        return (\n          <Helmet\n            htmlAttributes={{ lang }}\n            {...(title\n              ? {\n                  titleTemplate: `%s — ${siteMetadata.title}`,\n                  title,\n                }\n              : {\n                  title: `${siteMetadata.title} — A blog by Dan Abramov`,\n                })}\n            meta={[\n              {\n                name: \"description\",\n                content: metaDescription,\n              },\n              {\n                property: \"og:url\",\n                content: url,\n              },\n              {\n                property: \"og:title\",\n                content: title || siteMetadata.title,\n              },\n              {\n                property: \"og:description\",\n                content: metaDescription,\n              },\n              {\n                name: \"twitter:card\",\n                content: \"summary\",\n              },\n              {\n                name: \"twitter:creator\",\n                content: siteMetadata.social.twitter,\n              },\n              {\n                name: \"twitter:title\",\n                content: title || siteMetadata.title,\n              },\n              {\n                name: \"twitter:description\",\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                metaImage\n                  ? [\n                      {\n                        property: \"og:image\",\n                        content: metaImage,\n                      },\n                      {\n                        name: \"twitter:image\",\n                        content: metaImage,\n                      },\n                    ]\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  meta: [],\n  title: \"\",\n  slug: \"\",\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  image: PropTypes.string,\n  meta: PropTypes.array,\n  slug: PropTypes.string,\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/Bio\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/Seo\"\nimport { rhythm, scale } from \"../utils/typography\"\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark\n    const siteTitle = this.props.data.site.siteMetadata.title\n    const { previous, next } = this.props.pageContext\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          title={post.frontmatter.title}\n          description={post.frontmatter.description || post.excerpt}\n        />\n        <article>\n          <header>\n            <h1\n              style={{\n                marginTop: rhythm(1),\n                marginBottom: 0,\n              }}\n            >\n              {post.frontmatter.title}\n            </h1>\n            <p\n              style={{\n                ...scale(-1 / 5),\n                display: `block`,\n                marginBottom: rhythm(1),\n              }}\n            >\n              {post.frontmatter.date}\n            </p>\n          </header>\n          <section dangerouslySetInnerHTML={{ __html: post.html }} />\n          <hr\n            style={{\n              marginBottom: rhythm(1),\n              marginTop: rhythm(1),\n            }}\n          />\n          <footer>\n            <Bio />\n          </footer>\n        </article>\n\n        <nav>\n          <ul\n            style={{\n              display: `flex`,\n              flexWrap: `wrap`,\n              justifyContent: `space-between`,\n              listStyle: `none`,\n              padding: 0,\n            }}\n          >\n            <li>\n              {previous && (\n                <Link to={previous.fields.slug} rel=\"prev\">\n                  ← {previous.frontmatter.title}\n                </Link>\n              )}\n            </li>\n            <li>\n              {next && (\n                <Link to={next.fields.slug} rel=\"next\">\n                  {next.frontmatter.title} →\n                </Link>\n              )}\n            </li>\n          </ul>\n        </nav>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n  }\n`\n"],"sourceRoot":""}